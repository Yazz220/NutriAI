import type { SharedValue } from "react-native-reanimated";
import type { Skia, SkCanvas, SkSize } from "../skia/types";
import type { Node } from "./Node";
import type { Recording } from "./Recorder/Recorder";
import "../views/api";
export declare abstract class Container {
    protected Skia: Skia;
    private _root;
    protected recording: Recording | null;
    protected unmounted: boolean;
    constructor(Skia: Skia);
    get root(): Node[];
    set root(value: Node[]);
    mount(): void;
    unmount(): void;
    drawOnCanvas(canvas: SkCanvas): void;
    abstract redraw(): void;
}
declare class StaticContainer extends Container {
    private nativeId;
    private onSize?;
    constructor(Skia: Skia, nativeId: number, onSize?: SharedValue<SkSize> | undefined);
    redraw(): void;
}
declare class ReanimatedContainer extends Container {
    private nativeId;
    private onSize?;
    private mapperId;
    constructor(Skia: Skia, nativeId: number, onSize?: SharedValue<SkSize> | undefined);
    redraw(): void;
}
declare class NativeReanimatedContainer extends Container {
    private nativeId;
    private onSize?;
    private mapperId;
    constructor(Skia: Skia, nativeId: number, onSize?: SharedValue<SkSize> | undefined);
    redraw(): void;
}
export declare const createContainer: (Skia: Skia, nativeId: number, onSize?: SharedValue<SkSize>) => StaticContainer | ReanimatedContainer | NativeReanimatedContainer;
export {};
